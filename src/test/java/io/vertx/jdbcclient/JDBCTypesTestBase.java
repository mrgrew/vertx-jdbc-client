/*
 * Copyright (c) 2011-2014 The original author or authors
 * ------------------------------------------------------
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Apache License v2.0 which accompanies this distribution.
 *
 *     The Eclipse Public License is available at
 *     http://www.eclipse.org/legal/epl-v10.html
 *
 *     The Apache License v2.0 is available at
 *     http://www.opensource.org/licenses/apache2.0.php
 *
 * You may elect to redistribute this code under either of these licenses.
 */

package io.vertx.jdbcclient;

import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.DBConfigs;
import io.vertx.jdbcclient.spi.JDBCEncoderImpl;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.jdbcclient.impl.actions.JDBCColumnDescriptor;
import io.vertx.sqlclient.SqlConnection;
import io.vertx.sqlclient.Tuple;
import junit.framework.AssertionFailedError;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.JDBCType;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 * @author <a href="mailto:pmlopes@gmail.com">Paulo Lopes</a>
 */
@RunWith(VertxUnitRunner.class)
public class JDBCTypesTestBase extends ClientTestBase {

  private static final List<String> SQL = new ArrayList<>();

  static {
    //TODO: Create table with more types for testing
    SQL.add("create table insert_table (id int not null primary key, lname varchar(255), fname varchar(255), dob date )");
  }

  //TODO: https://issues.apache.org/jira/browse/DERBY-6920
  public static class DerbyEncoder extends JDBCEncoderImpl {
    @Override
    protected Object encodeDateTime(JDBCColumnDescriptor descriptor, Object value) {
      Object v = super.encodeDateTime(descriptor, value);
      if (descriptor.jdbcType() == JDBCType.DATE) {
        return Date.valueOf((LocalDate) v);
      }
      return v;
    }
  }

  @Override
  protected JDBCConnectOptions connectOptions() {
    return DataSourceConfigs.derby(getClass())
      .setAutoGeneratedKeys(true)
      .setExtraConfig(new JsonObject().put("encoderCls", DerbyEncoder.class.getName()));
  }

  @BeforeClass
  public static void createDb() throws Exception {
    Connection conn = DriverManager.getConnection(DBConfigs.derby(JDBCTypesTestBase.class).getString("url"));
    for (String sql : SQL) {
      conn.createStatement().execute(sql);
    }
  }

  @Test
  public void testInsertWithNullParameters(TestContext should) {
    SqlConnection conn = connection();
    String sql = "INSERT INTO insert_table (id, lname, fname, dob) VALUES (?, ?, ?, ?)";
    conn
      .preparedQuery(sql)
      .execute(Tuple.of(1, null, null, LocalDate.of(2002, 2, 2)))
      .onComplete(should.asyncAssertSuccess(res1 -> {
        should.assertEquals(1, res1.rowCount());
        conn
          .preparedQuery("SElECT DOB FROM insert_table WHERE id=?")
          .execute(Tuple.of(1))
          .onComplete(should.asyncAssertSuccess(res2 -> {
            should.assertEquals(1, res2.size());
            should.assertEquals(LocalDate.class, res2.iterator().next().getValue(0).getClass());
          }));
      }));
  }

  private SqlConnection connection() {
    try {
      return client.getConnection().toCompletionStage().toCompletableFuture().get(10, TimeUnit.SECONDS);
    } catch (InterruptedException |TimeoutException e) {
      AssertionFailedError afe = new AssertionFailedError();
      afe.initCause(e);
      throw afe;
    } catch (ExecutionException e) {
      AssertionFailedError afe = new AssertionFailedError();
      afe.initCause(e.getCause());
      throw afe;
    }
  }
}
